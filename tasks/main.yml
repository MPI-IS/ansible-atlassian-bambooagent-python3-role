# This file installs packages and declares associated capabilities
# For each defined package,
# - it transfers the package to the host
# - it runs a specific installation script
# - it declares the associated capabilities, if any
# - it does not cleans up the file. The file is in /tmp, so it should be safe
#   to keep it there to accelerate further transfers


- name: '[PYTHON3] Checking that required variables are set'
  fail: msg="{{ item }} is not defined"
  when: item is undefined
  with_items:
    - python3_version
    - python3_installer

#
#
# Windows
#
#

- block:

  - name: '[PYTHON3] copy the installer'
    win_copy:
      src: "{{ python3_installer.file }}"
      dest: "{{ ansible_env['TEMP'] }}\\{{python3_installer.file | basename}}"

  # installs on a default folder c:\pythonXY
  - name: '[PYTHON3] installation'
    win_package:
      path: "{{ ansible_env['TEMP'] }}\\{{python3_installer.file | basename}}"
      state: present
      creates_path: "{{ windows_python_default_install }}"
      arguments: InstallAllUsers=1 PrependPath=1 Include_debug=1 TargetDir="{{ windows_python_default_install }}"
      
  # 
  #- name: '[PYTHON3] running python3'
  #  win_command: "{{ windows_python_default_install }}\\python -c \"import sys; print('%d.%d\\n%s' % (sys.version_info.major, sys.version_info.minor, sys.executable))\""
  #  register: python_binary_location

  #- name: '[PYTHON3] finding the installation path'
  #  set_fact:
  #    python_binary_location: "C:\\Python{{python3_version.major}}{{python3_version.minor}}"

  #- debug:
  #    var: python_binary_location

  - name: '[PYTHON3] locating python3 binary'
    win_command: "{{ windows_python_default_install }}\\python -c \"import sys; print('%d.%d\\n%s' % (sys.version_info.major, sys.version_info.minor, sys.executable))\""
    register: python3_output
    ignore_errors: False
    tags: 
      - capability

  #- debug:
  #    var: python3_output

  - name: '[PYTHON3] registering python3'
    set_fact:
      bamboo_capabilities: "{{ bamboo_capabilities | combine({item.key:item.value}) }}"
    with_items:
      - key: 'system.builder.command.python{{python3_output.stdout_lines.0}}'
        value: '{{ python3_output.stdout_lines.1 }}'      
    tags: 
      - capability

  vars:
    windows_python_default_install: C:\\Python{{python3_version.major}}{{python3_version.minor}}

  when: ansible_os_family=="Windows"

  rescue:
    - debug: msg="An error occured"
    - win_command: /bin/false

  always:
    # pretty sure that this file will not get cleaned up
    - name: '[PYTHON3] removing unused installer'
      win_file:
        path: "{{ ansible_env['TEMP'] }}\\{{python3_installer.file | basename}}"
        state: absent

  tags: 
    - python3 


#
# OSX / installation
#
- block:
  - name: '[PYTHON3] transfer installation package'
    copy:
      src: "{{ python3_installer.file }}"
      dest: "/tmp/{{ python3_installer.file | basename }}"

  - name: '[PYTHON3] package installation'
    shell: "installer -allowUntrusted -dumplog -pkg \"/tmp/{{ python3_installer.file | basename }}\" -target /"
        
  when: (ansible_distribution=="MacOSX")

  rescue:
    - debug: msg="An error occured"
    - command: /bin/false

  tags: 
    - python3 

#
# linux / installation with regular packages
#
- block:
  - name: '[PYTHON3] install python3 standard packages'
    apt: name="{{ item }}" update_cache=yes state=present cache_valid_time=3600
    with_items: 
     - "{{ 'python%s.%s' % (python3_version.major, python3_version.minor) }}"
     - "{{ 'libpython%s.%s-dev' % (python3_version.major, python3_version.minor) }}"

  when: (ansible_distribution=="Ubuntu")

  tags: 
    - python3


# locating python3 for OSX and Ubuntu and registering the bamboo capability
- block:

  - name: '[PYTHON3] locating python3 binary'
    shell: python3 -c "import sys; print('%d.%d\n%s' % (sys.version_info.major, sys.version_info.minor, sys.executable))"
    register: python3_output
    ignore_errors: False
    tags: 
    - capability
    
  - name: '[PYTHON3] registering python3'
    set_fact:
      bamboo_capabilities: "{{ bamboo_capabilities | combine({item.key:item.value}) }}"
    with_items:
      - key: 'system.builder.command.python{{python3_output.stdout_lines.0}}'
        value: '{{ python3_output.stdout_lines.1 }}'      
    tags: 
      - capability
          
  when: ansible_os_family!="Windows"
  
  rescue:
    - debug: msg="An error occured"
    - command: /bin/false

  tags: 
    - python3 
